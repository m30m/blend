/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\55\1\56\1\1\16\13\4\0\1\3\1\54"+
    "\1\45\1\0\1\11\1\50\1\52\1\46\1\50\1\50\1\10\1\50"+
    "\1\50\1\5\1\17\1\7\1\14\11\15\1\47\1\50\1\4\1\51"+
    "\1\6\2\0\32\11\1\50\1\20\1\50\1\50\1\11\1\0\1\21"+
    "\1\30\1\35\1\41\1\33\1\43\1\26\1\36\1\25\1\11\1\34"+
    "\1\32\1\42\1\27\1\31\2\11\1\22\1\24\1\37\1\40\1\12"+
    "\1\44\1\16\1\23\1\11\1\50\1\53\1\50\1\50\6\13\1\57"+
    "\32\13\2\0\4\11\4\0\1\11\2\0\1\13\7\0\1\11\4\0"+
    "\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11\16\0"+
    "\5\11\7\0\1\11\1\0\1\11\21\0\160\13\5\11\1\0\2\11"+
    "\2\0\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11"+
    "\1\0\123\11\1\0\213\11\1\0\5\13\2\0\236\11\11\0\46\11"+
    "\2\0\1\11\7\0\47\11\7\0\1\11\1\0\55\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\11\5\0\3\11"+
    "\15\0\5\13\6\0\1\11\4\0\13\13\5\0\53\11\37\13\4\0"+
    "\2\11\1\13\143\11\1\0\1\11\10\13\1\0\6\13\2\11\2\13"+
    "\1\0\4\13\2\11\12\13\3\11\2\0\1\11\17\0\1\13\1\11"+
    "\1\13\36\11\33\13\2\0\131\11\13\13\1\11\16\0\12\13\41\11"+
    "\11\13\2\11\4\0\1\11\5\0\26\11\4\13\1\11\11\13\1\11"+
    "\3\13\1\11\5\13\22\0\31\11\3\13\104\0\1\11\1\0\13\11"+
    "\67\0\33\13\1\0\4\13\66\11\3\13\1\11\22\13\1\11\7\13"+
    "\12\11\2\13\2\0\12\13\1\0\7\11\1\0\7\11\1\0\3\13"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11"+
    "\3\0\4\11\2\0\1\13\1\11\7\13\2\0\2\13\2\0\3\13"+
    "\1\11\10\0\1\13\4\0\2\11\1\0\3\11\2\13\2\0\12\13"+
    "\4\11\7\0\1\11\5\0\3\13\1\0\6\11\4\0\2\11\2\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0"+
    "\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13\7\0"+
    "\4\11\1\0\1\11\7\0\14\13\3\11\1\13\13\0\3\13\1\0"+
    "\11\11\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0"+
    "\5\11\2\0\1\13\1\11\10\13\1\0\3\13\1\0\3\13\2\0"+
    "\1\11\17\0\2\11\2\13\2\0\12\13\1\0\1\11\17\0\3\13"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\1\13\1\11\7\13\2\0\2\13\2\0\3\13"+
    "\10\0\2\13\4\0\2\11\1\0\3\11\2\13\2\0\12\13\1\0"+
    "\1\11\20\0\1\13\1\11\1\0\6\11\3\0\3\11\1\0\4\11"+
    "\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11"+
    "\3\0\14\11\4\0\5\13\3\0\3\13\1\0\4\13\2\0\1\11"+
    "\6\0\1\13\16\0\12\13\11\0\1\11\7\0\3\13\1\0\10\11"+
    "\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0\1\11"+
    "\7\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0\2\11\6\0"+
    "\2\11\2\13\2\0\12\13\22\0\2\13\1\0\10\11\1\0\3\11"+
    "\1\0\27\11\1\0\12\11\1\0\5\11\2\0\1\13\1\11\7\13"+
    "\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\11\1\0\2\11"+
    "\2\13\2\0\12\13\1\0\2\11\17\0\2\13\1\0\10\11\1\0"+
    "\3\11\1\0\51\11\2\0\1\11\7\13\1\0\3\13\1\0\4\13"+
    "\1\11\10\0\1\13\10\0\2\11\2\13\2\0\12\13\12\0\6\11"+
    "\2\0\2\13\1\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11"+
    "\2\0\7\11\3\0\1\13\4\0\6\13\1\0\1\13\1\0\10\13"+
    "\22\0\2\13\15\0\60\11\1\13\2\11\7\13\4\0\10\11\10\13"+
    "\1\0\12\13\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11"+
    "\1\0\1\11\2\0\2\11\1\0\4\11\1\13\2\11\6\13\1\0"+
    "\2\13\1\11\2\0\5\11\1\0\1\11\1\0\6\13\2\0\12\13"+
    "\2\0\4\11\40\0\1\11\27\0\2\13\6\0\12\13\13\0\1\13"+
    "\1\0\1\13\1\0\1\13\4\0\2\13\10\11\1\0\44\11\4\0"+
    "\24\13\1\0\2\13\5\11\13\13\1\0\44\13\11\0\1\13\71\0"+
    "\53\11\24\13\1\11\12\13\6\0\6\11\4\13\4\11\3\13\1\11"+
    "\3\13\2\11\7\13\3\11\4\13\15\11\14\13\1\11\17\13\2\0"+
    "\46\11\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0"+
    "\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0"+
    "\4\11\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0"+
    "\4\11\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0"+
    "\3\13\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0"+
    "\32\11\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11\3\13"+
    "\13\0\22\11\3\13\13\0\22\11\2\13\14\0\15\11\1\0\3\11"+
    "\1\0\2\13\14\0\64\11\40\13\3\0\1\11\3\0\2\11\1\13"+
    "\2\0\12\13\41\0\3\13\2\0\12\13\6\0\130\11\10\0\51\11"+
    "\1\13\1\11\5\0\106\11\12\0\35\11\3\0\14\13\4\0\14\13"+
    "\12\0\12\13\36\11\2\0\5\11\13\0\54\11\4\0\21\13\7\11"+
    "\2\13\6\0\12\13\46\0\27\11\5\13\4\0\65\11\12\13\1\0"+
    "\35\13\2\0\13\13\6\0\12\13\15\0\1\11\130\0\5\13\57\11"+
    "\21\13\7\11\4\0\12\13\21\0\11\13\14\0\3\13\36\11\15\13"+
    "\2\11\12\13\54\11\16\13\14\0\44\11\24\13\10\0\12\13\3\0"+
    "\3\11\12\13\44\11\122\0\3\13\1\0\25\13\4\11\1\13\4\11"+
    "\3\13\2\11\11\0\300\11\47\13\25\0\4\13\u0116\11\2\0\6\11"+
    "\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11"+
    "\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11"+
    "\5\0\3\11\1\0\7\11\16\0\5\13\30\0\1\55\1\55\5\13"+
    "\20\0\2\11\23\0\1\11\13\0\5\13\5\0\6\13\1\0\1\11"+
    "\15\0\1\11\20\0\15\11\3\0\33\11\25\0\15\13\4\0\1\13"+
    "\3\0\14\13\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11"+
    "\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11"+
    "\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11"+
    "\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\4\11\3\13\2\11"+
    "\14\0\46\11\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11"+
    "\17\0\1\13\27\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\40\13\57\0\1\11\u01d5\0\3\11\31\0\11\11\6\13\1\0\5\11"+
    "\2\0\5\11\4\0\126\11\2\0\2\13\2\0\3\11\1\0\132\11"+
    "\1\0\4\11\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11"+
    "\u0200\0\u19b6\11\112\0\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11"+
    "\3\0\20\11\12\13\2\11\24\0\57\11\1\13\4\0\12\13\1\0"+
    "\31\11\7\0\1\13\120\11\2\13\45\0\11\11\2\0\147\11\2\0"+
    "\4\11\1\0\4\11\14\0\13\11\115\0\12\11\1\13\3\11\1\13"+
    "\4\11\1\13\27\11\5\13\20\0\1\11\7\0\64\11\14\0\2\13"+
    "\62\11\21\13\13\0\12\13\6\0\22\13\6\11\3\0\1\11\4\0"+
    "\12\13\34\11\10\13\2\0\27\11\15\13\14\0\35\11\3\0\4\13"+
    "\57\11\16\13\16\0\1\11\12\13\46\0\51\11\16\13\11\0\3\11"+
    "\1\13\10\11\2\13\2\0\12\13\6\0\27\11\3\0\1\11\1\13"+
    "\4\0\60\11\1\13\1\11\3\13\2\11\2\13\5\11\2\13\1\11"+
    "\1\13\1\11\30\0\3\11\2\0\13\11\5\13\2\0\3\11\2\13"+
    "\12\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11"+
    "\221\0\43\11\10\13\1\0\2\13\2\0\12\13\6\0\u2ba4\11\14\0"+
    "\27\11\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0"+
    "\5\11\5\0\1\11\1\13\12\11\1\0\15\11\1\0\5\11\1\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0"+
    "\100\11\2\0\66\11\50\0\15\11\3\0\20\13\20\0\7\13\14\0"+
    "\2\11\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0"+
    "\1\13\4\0\1\11\13\0\12\13\7\0\32\11\4\0\1\11\1\0"+
    "\32\11\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0"+
    "\3\11\3\0\2\11\3\0\2\11\22\0\3\13\4\0\14\11\1\0"+
    "\32\11\1\0\23\11\1\0\2\11\1\0\17\11\2\0\16\11\42\0"+
    "\173\11\105\0\65\11\210\0\1\13\202\0\35\11\3\0\61\11\57\0"+
    "\37\11\21\0\33\11\65\0\36\11\2\0\44\11\4\0\10\11\1\0"+
    "\5\11\52\0\236\11\2\0\12\13\u0356\0\6\11\2\0\1\11\1\0"+
    "\54\11\1\0\2\11\3\0\1\11\2\0\27\11\252\0\26\11\12\0"+
    "\32\11\106\0\70\11\6\0\2\11\100\0\1\11\3\13\1\0\2\13"+
    "\5\0\4\13\4\11\1\0\3\11\1\0\33\11\4\0\3\13\4\0"+
    "\1\13\40\0\35\11\203\0\66\11\12\0\26\11\12\0\23\11\215\0"+
    "\111\11\u03b7\0\3\13\65\11\17\13\37\0\12\13\20\0\3\13\55\11"+
    "\13\13\2\0\1\13\22\0\31\11\7\0\12\13\6\0\3\13\44\11"+
    "\16\13\1\0\12\13\100\0\3\13\60\11\16\13\4\11\13\0\12\13"+
    "\u04a6\0\53\11\15\13\10\0\12\13\u0936\0\u036f\11\221\0\143\11\u0b9d\0"+
    "\u042f\11\u33d1\0\u0239\11\u04c7\0\105\11\13\0\1\11\56\13\20\0\4\13"+
    "\15\11\u4060\0\2\11\u2163\0\5\13\3\0\26\13\2\0\7\13\36\0"+
    "\4\13\224\0\3\13\u01bb\0\125\11\1\0\107\11\1\0\2\11\2\0"+
    "\1\11\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0"+
    "\7\11\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0"+
    "\34\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0"+
    "\u0154\11\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0"+
    "\37\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0"+
    "\31\11\1\0\10\11\2\0\62\13\u1600\0\4\11\1\0\33\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0"+
    "\1\11\1\0\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0"+
    "\1\11\1\0\12\11\1\0\21\11\5\0\3\11\1\0\5\11\1\0"+
    "\21\11\u1144\0\ua6d7\11\51\0\u1035\11\13\0\336\11\u3fe2\0\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\13\36\0\140\13\200\0\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\3\2\5\2\6"+
    "\1\3\16\5\1\7\1\10\4\3\1\11\1\12\1\13"+
    "\1\1\2\14\1\1\1\0\1\2\1\0\1\5\1\0"+
    "\1\15\1\16\5\5\1\3\16\5\1\17\1\20\1\21"+
    "\1\22\1\23\11\24\2\0\7\5\1\25\14\5\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\2\0"+
    "\11\5\1\36\1\5\1\0\15\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\220\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\220\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\220\0\220"+
    "\0\u0540\0\u0570\0\u05a0\0\u0150\0\u05d0\0\u0600\0\220\0\u0630"+
    "\0\u0660\0\220\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u0270\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u01b0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u01b0\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u01b0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\4\1\16\1\17\1\14\1\20\1\4"+
    "\1\21\1\22\1\14\1\23\1\24\1\25\1\14\1\26"+
    "\1\27\1\30\1\31\1\14\1\32\1\14\1\33\1\14"+
    "\1\34\1\14\1\35\1\36\1\37\1\40\1\41\2\13"+
    "\1\42\1\43\1\44\1\4\1\6\1\4\1\45\2\4"+
    "\15\45\1\46\24\45\1\47\12\45\1\50\1\51\1\52"+
    "\15\50\1\53\25\50\1\4\11\50\62\0\1\6\62\0"+
    "\1\54\43\0\1\13\13\0\1\55\123\0\1\13\16\0"+
    "\1\56\60\0\6\14\2\0\24\14\12\0\1\14\11\0"+
    "\6\14\2\0\10\14\1\57\13\14\12\0\1\14\14\0"+
    "\2\60\1\61\1\62\54\0\2\17\1\0\1\62\54\0"+
    "\2\62\53\0\6\14\2\0\1\14\1\63\1\14\1\64"+
    "\20\14\12\0\1\14\11\0\6\14\2\0\12\14\1\65"+
    "\11\14\12\0\1\14\11\0\6\14\2\0\16\14\1\66"+
    "\5\14\12\0\1\14\11\0\6\14\2\0\6\14\1\67"+
    "\13\14\1\70\1\14\12\0\1\14\11\0\6\14\2\0"+
    "\10\14\1\71\13\14\12\0\1\14\11\0\6\14\2\0"+
    "\1\14\1\72\6\14\1\73\13\14\12\0\1\14\11\0"+
    "\6\14\2\0\17\14\1\74\2\14\1\70\1\14\12\0"+
    "\1\14\11\0\6\14\2\0\1\75\7\14\1\76\13\14"+
    "\12\0\1\14\11\0\6\14\2\0\6\14\1\77\2\14"+
    "\1\100\12\14\12\0\1\14\11\0\6\14\2\0\1\100"+
    "\7\14\1\101\4\14\1\102\6\14\12\0\1\14\11\0"+
    "\6\14\2\0\1\14\1\103\22\14\12\0\1\14\11\0"+
    "\6\14\2\0\10\14\1\70\13\14\12\0\1\14\11\0"+
    "\6\14\2\0\1\104\16\14\1\105\4\14\12\0\1\14"+
    "\11\0\6\14\2\0\15\14\1\106\6\14\12\0\1\14"+
    "\47\0\1\13\1\0\1\13\60\0\1\13\60\0\1\13"+
    "\4\0\1\45\2\0\15\45\1\0\24\45\1\0\12\45"+
    "\22\0\1\107\4\0\1\110\7\0\1\111\5\0\1\112"+
    "\60\0\1\113\13\0\1\52\55\0\1\114\2\0\15\114"+
    "\1\115\1\114\1\116\4\114\1\117\1\120\6\114\1\121"+
    "\3\114\1\122\1\114\1\123\1\124\6\114\10\0\1\125"+
    "\52\0\1\55\1\5\1\6\55\55\10\0\1\126\60\0"+
    "\6\14\2\0\4\14\1\127\17\14\12\0\1\14\14\0"+
    "\2\60\1\0\1\62\54\0\2\61\53\0\6\14\2\0"+
    "\1\14\1\130\22\14\12\0\1\14\11\0\6\14\2\0"+
    "\3\14\1\131\20\14\12\0\1\14\11\0\6\14\2\0"+
    "\1\132\10\14\1\133\4\14\1\134\5\14\12\0\1\14"+
    "\11\0\6\14\2\0\1\14\1\135\22\14\12\0\1\14"+
    "\11\0\6\14\2\0\16\14\1\136\5\14\12\0\1\14"+
    "\11\0\6\14\2\0\16\14\1\34\5\14\12\0\1\14"+
    "\11\0\6\14\2\0\12\14\1\137\11\14\12\0\1\14"+
    "\11\0\6\14\2\0\10\14\1\132\13\14\12\0\1\14"+
    "\11\0\6\14\2\0\16\14\1\70\5\14\12\0\1\14"+
    "\11\0\6\14\2\0\7\14\1\140\6\14\1\141\5\14"+
    "\12\0\1\14\11\0\6\14\2\0\6\14\1\142\15\14"+
    "\12\0\1\14\11\0\1\14\1\143\4\14\2\0\20\14"+
    "\1\144\3\14\12\0\1\14\11\0\6\14\2\0\3\14"+
    "\1\141\20\14\12\0\1\14\11\0\6\14\2\0\6\14"+
    "\1\145\15\14\12\0\1\14\11\0\6\14\2\0\1\146"+
    "\23\14\12\0\1\14\11\0\6\14\2\0\17\14\1\147"+
    "\4\14\12\0\1\14\11\0\6\14\2\0\11\14\1\150"+
    "\12\14\12\0\1\14\11\0\6\14\2\0\6\14\1\151"+
    "\15\14\12\0\1\14\11\0\6\14\2\0\4\14\1\152"+
    "\17\14\12\0\1\14\46\0\1\153\57\0\1\154\57\0"+
    "\1\155\57\0\1\156\57\0\1\157\57\0\1\160\57\0"+
    "\1\161\57\0\1\162\11\0\5\125\1\163\52\125\10\126"+
    "\1\164\47\126\11\0\6\14\2\0\20\14\1\136\3\14"+
    "\12\0\1\14\11\0\6\14\2\0\1\165\23\14\12\0"+
    "\1\14\11\0\6\14\2\0\4\14\1\166\17\14\12\0"+
    "\1\14\11\0\6\14\2\0\11\14\1\136\12\14\12\0"+
    "\1\14\11\0\6\14\2\0\12\14\1\167\11\14\12\0"+
    "\1\14\11\0\6\14\2\0\17\14\1\170\4\14\12\0"+
    "\1\14\11\0\6\14\2\0\4\14\1\76\12\14\1\171"+
    "\4\14\12\0\1\14\11\0\6\14\2\0\1\172\23\14"+
    "\12\0\1\14\11\0\6\14\2\0\12\14\1\173\11\14"+
    "\12\0\1\14\11\0\6\14\2\0\12\14\1\70\11\14"+
    "\12\0\1\14\11\0\6\14\2\0\5\14\1\136\16\14"+
    "\12\0\1\14\11\0\6\14\2\0\4\14\1\174\17\14"+
    "\12\0\1\14\11\0\6\14\2\0\14\14\1\167\7\14"+
    "\12\0\1\14\11\0\6\14\2\0\16\14\1\175\5\14"+
    "\12\0\1\14\11\0\6\14\2\0\1\14\1\136\22\14"+
    "\12\0\1\14\11\0\6\14\2\0\12\14\1\176\11\14"+
    "\12\0\1\14\11\0\6\14\2\0\3\14\1\147\20\14"+
    "\12\0\1\14\11\0\6\14\2\0\14\14\1\177\7\14"+
    "\12\0\1\14\11\0\6\14\2\0\11\14\1\141\12\14"+
    "\12\0\1\14\5\125\1\200\52\125\7\126\1\6\1\164"+
    "\47\126\11\0\6\14\2\0\2\14\1\70\21\14\12\0"+
    "\1\14\11\0\6\14\2\0\5\14\1\201\16\14\12\0"+
    "\1\14\11\0\6\14\2\0\1\100\23\14\12\0\1\14"+
    "\11\0\6\14\2\0\1\14\1\201\22\14\12\0\1\14"+
    "\11\0\6\14\2\0\14\14\1\202\7\14\12\0\1\14"+
    "\11\0\6\14\2\0\13\14\1\70\10\14\12\0\1\14"+
    "\11\0\6\14\2\0\11\14\1\70\12\14\12\0\1\14"+
    "\11\0\6\14\2\0\1\14\1\203\22\14\12\0\1\14"+
    "\11\0\6\14\2\0\4\14\1\204\17\14\12\0\1\14"+
    "\11\0\6\14\2\0\16\14\1\205\5\14\12\0\1\14"+
    "\5\125\1\200\1\6\51\125\11\0\6\14\2\0\6\14"+
    "\1\70\15\14\12\0\1\14\11\0\6\14\2\0\16\14"+
    "\1\206\5\14\12\0\1\14\11\0\6\14\2\0\10\14"+
    "\1\207\13\14\12\0\1\14\11\0\6\14\2\0\6\14"+
    "\1\210\15\14\12\0\1\14\11\0\6\14\2\0\4\14"+
    "\1\211\17\14\12\0\1\14\11\0\6\14\2\0\17\14"+
    "\1\212\4\14\12\0\1\14\11\0\6\14\2\0\6\14"+
    "\1\213\15\14\12\0\1\14\11\0\6\14\2\0\17\14"+
    "\1\141\4\14\12\0\1\14\11\0\6\14\2\0\10\14"+
    "\1\201\13\14\12\0\1\14\11\0\6\14\2\0\1\14"+
    "\1\141\22\14\12\0\1\14\11\0\6\14\2\0\21\14"+
    "\1\214\2\14\12\0\1\14\11\0\6\14\2\0\12\14"+
    "\1\215\11\14\12\0\1\14\11\0\6\14\2\0\6\14"+
    "\1\74\15\14\12\0\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\4\1\1\11\23\1\2\11"+
    "\6\1\1\11\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\26\1\6\11\10\1\2\0\24\1\10\11"+
    "\2\0\13\1\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public int lineNumber() {
        return yyline;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2858) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token NextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Token("$");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
          case 31: break;
          case 2: 
            { /* ignore */
            }
          case 32: break;
          case 3: 
            { return new Token(yytext());
            }
          case 33: break;
          case 4: 
            { if(Parser.cg.isInsideStructAssign()){return new Token("assignEnd");}return new Token(yytext());
            }
          case 34: break;
          case 5: 
            { if(Parser.cg.getStruct(yytext())!=null){return Parser.cg.getStruct(yytext());}return new Identifier("id", yytext());
            }
          case 35: break;
          case 6: 
            { return new Literal("const", "INT", yytext());
            }
          case 36: break;
          case 7: 
            { string.setLength(0); yybegin(STRING);
            }
          case 37: break;
          case 8: 
            { string.setLength(0); yybegin(CHARLITERAL);
            }
          case 38: break;
          case 9: 
            { string.append( yytext() );
            }
          case 39: break;
          case 10: 
            { string.append('\\');
            }
          case 40: break;
          case 11: 
            { yybegin(YYINITIAL);
                                   return
                                   new Literal("const", "STRING", string.toString());
            }
          case 41: break;
          case 12: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 42: break;
          case 13: 
            { return new Literal("const", "HEX", yytext());
            }
          case 43: break;
          case 14: 
            { return new Literal("const", "REAL", yytext());
            }
          case 44: break;
          case 15: 
            { string.append('\r');
            }
          case 45: break;
          case 16: 
            { string.append('\n');
            }
          case 46: break;
          case 17: 
            { string.append('\t');
            }
          case 47: break;
          case 18: 
            { string.append('\"');
            }
          case 48: break;
          case 19: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", yytext().charAt(0));
            }
          case 49: break;
          case 20: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 50: break;
          case 21: 
            { return new PrimitiveType("type", yytext());
            }
          case 51: break;
          case 22: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\\');
            }
          case 52: break;
          case 23: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\r');
            }
          case 53: break;
          case 24: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\n');
            }
          case 54: break;
          case 25: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\b');
            }
          case 55: break;
          case 26: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\t');
            }
          case 56: break;
          case 27: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\f');
            }
          case 57: break;
          case 28: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\"');
            }
          case 58: break;
          case 29: 
            { yybegin(YYINITIAL); return new Literal("const", "CHAR", '\'');
            }
          case 59: break;
          case 30: 
            { return new Literal("const", "BOOL", yytext());
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
